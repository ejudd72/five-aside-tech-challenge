{"version":3,"sources":["data/initial.js","data/reducer.js","data/store.js","components/Header/Header.js","components/Header/index.js","components/ShirtPicker.js","components/StartForm/StartForm.js","functions/randomSort.js","functions/fairSort.js","components/StartForm/index.js","data/actions.js","components/Teams.js","components/Pitch/Pitch.js","components/Pitch/index.js","components/Warning/Warning.js","components/Warning/index.js","components/Previous/Previous.js","components/Previous/index.js","components/About/About.js","components/About/index.js","components/App.js","serviceWorker.js","index.js"],"names":["initial","submitted","perTeam","previousTeams","players","randomSort","teamNames","team1","team2","showPrevious","showAbout","warning","message","shirtChoice","reducer","state","action","type","length","acceptWarning","editPlayers","team1Name","team2Name","submitPlayers","reset","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","persistState","Header","handleShowPrevious","handleShowAbout","className","onClick","Jumbotron","connect","dispatch","ShirtPicker","teamName","teamNo","handlePatternChoice","handleColourChoice","chosenShirt","class","alt","src","style","backgroundColor","pattern","colour","width","display","onChangeComplete","event","StartForm","props","generateEmptyPlayers","handleAddField","bind","handleRemoveField","handleAddTeamName","handleAddPlayer","handleAddSkill","handleReset","handleSubmit","number","i","push","name","skill","e","preventDefault","this","setState","filter","_","index","newTeamNames","currentTarget","value","newPlayers","newShirtChoices","hex","string","lowerCase","toLowerCase","upperFirstChar","charAt","toUpperCase","titleCase","replace","truePlayers","current","map","splitTeams","shuffled","j","Math","floor","random","temp","shuffle","console","log","sortedPlayers","sort","a","b","sortBySkill","bestPlayers","worstPlayers","above","below","shift","team1Above","concat","team2Above","splitPlayers","fairSort","tidyTeamNames","formResults","round","validate","handleSave","Form","FormControl","onChange","placeholder","InputGroup","key","min","max","variant","Component","Teams","team","teamNumber","reduce","acc","Pitch","allPlayers","handleEditPlayers","Warning","handleAcceptWarning","Alert","Heading","Button","Previous","Table","striped","rowSpan","About","href","title","App","Boolean","location","hostname","match","render","ReactDOM","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12e5bb3c.chunk.js","sourcesContent":["const initial = {\n    submitted: false,\n    perTeam: 5,\n    previousTeams: [],\n    players: [],\n    randomSort: true,\n    teamNames: [\"Team 1\", \"Team 2\"],\n    team1: [],\n    team2: [],\n    showPrevious: false,\n    showAbout: false,\n    warning: false, \n    message: \"\",\n    shirtChoice: {}\n}\n\nexport default initial;","import initial from \"./initial\";\n\nconst reducer = (state, action) => {\n\n  const reset = (state) => {\n      return {\n      ...initial, \n      previousTeams: state.previousTeams,\n    }\n  }\n\n  const submitPlayers = (state, { \n      team1, \n      team2, \n      players, \n      perTeam, \n      teamNames, \n      previousTeams, \n      randomSort, \n      submitted,\n      warning,\n      message,\n      shirtChoice\n    }) => {\n      return { \n        ...state, \n        team1, \n        team2, \n        players, \n        perTeam, \n        teamNames, \n        previousTeams: [{ \n          team1Name: previousTeams.team1Name, \n          team2Name: previousTeams.team2Name, \n          team1: previousTeams.team1, \n          team2: previousTeams.team2, \n          shirtChoice: previousTeams.shirtChoice,\n        }, ...state.previousTeams], \n        randomSort, \n        submitted,\n        warning,\n        message,\n        shirtChoice\n    }\n  };\n\n  const editPlayers = (state) =>  { \n    return  { \n      ...state, \n      submitted: false,\n    } \n  };\n\n  const acceptWarning = (state) =>  { \n    return  { \n      ...state, \n      warning: false,\n      message: \"\",\n      submitted: state.players.length > 1 ? true : false,\n    } \n  };\n\n  const showAbout =  (state) =>  { \n    return  { \n      ...state, \n      showAbout: !state.showAbout,\n    } \n  };\n\n  const showPrevious =  (state) =>  { \n    return  { \n      ...state, \n      showPrevious: !state.showPrevious,\n    } \n  };\n\n\n   switch (action.type) {\n    case \"showPrevious\": return showPrevious(state);\n    case \"showAbout\": return showAbout(state); \n    case \"acceptWarning\": return acceptWarning(state, action);\n    case \"editPlayers\": return editPlayers(state, action);\n    case \"submitPlayers\": return submitPlayers(state, action);\n    case \"reset\": return reset(state, action);\n    default: return state;\n } };\n\nexport default reducer;","import { createStore, compose } from \"redux\";\nimport reducer from \"./reducer\";\nimport initial from \"./initial\";\nimport persistState from \"redux-localstorage\";\n\nconst composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n\nconst store = createStore(\n    reducer,\n    initial,\n    composeEnhancers(persistState())\n);\n\nexport default store;","import React from \"react\";\nimport { Jumbotron } from \"react-bootstrap\";\n\nconst Header = ({ handleShowPrevious, showPrevious, showAbout, handleShowAbout }) => (\n   <>\n   <div className=\"button-panel header-buttons\">\n       \n        <button onClick={ handleShowPrevious }>\n            { showPrevious ? \"Close Previous Teams\" : \"Show Previous Teams\" } \n        </button>\n\n        <button onClick={ handleShowAbout }>\n                { showAbout ? \"Close About\" : \"Show About\" }\n        </button>\n    </div>\n\n    <Jumbotron className=\"header mt-4 mb-0\">\n        <h1>5-a-Side Team Builder</h1>\n    </Jumbotron>\n    </>\n);\n\nexport default Header;","import { connect } from \"react-redux\";\nimport Header from \"./Header\";\n\nconst mapStateToProps = ({ showPrevious, showAbout }) => {\n    return {\n        showPrevious,\n        showAbout\n    };\n  };\n\nconst mapDispatchToProps = dispatch => {\n    return {\n      handleShowPrevious: () => dispatch({ type: \"showPrevious\" }),\n      handleShowAbout: () => dispatch({ type: \"showAbout\" }),\n\n  }; \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import React from 'react';\nimport { CirclePicker } from 'react-color';\n\nconst ShirtPicker = ({ teamName, teamNo, handlePatternChoice, handleColourChoice, chosenShirt }) => (\n    <>\n        <h3>Choose { teamName }'s kit:</h3>  \n        <div class=\"shirt-pick-panel\">\n            \n            <img \n                className=\"shirt-select\"\n                alt=\"football jersey icon\"\n                onClick={ () => handlePatternChoice(teamNo, 1)} \n                src=\"./jerseys/pattern1.svg\"\n                style={{ backgroundColor: chosenShirt.pattern === 1 ? chosenShirt.colour : null, width: chosenShirt.pattern === 1 ? \"50px\" : \"30px\"}}\n            />\n\n            <img \n                className=\"shirt-select\"\n                alt=\"football jersey icon\"\n                onClick={ () => handlePatternChoice(teamNo, 2) } \n                src=\"./jerseys/pattern2.svg\"\n                style={{ backgroundColor: chosenShirt.pattern === 2 ? chosenShirt.colour : null, width: chosenShirt.pattern === 2 ? \"50px\" : \"30px\"}}\n            />\n\n            <img \n                className=\"shirt-select\"\n                alt=\"football jersey icon\"\n                onClick={() => handlePatternChoice(teamNo, 3)}  \n                src=\"./jerseys/pattern3.svg\"\n                style={{ backgroundColor: chosenShirt.pattern === 3 ? chosenShirt.colour : null, width: chosenShirt.pattern === 3 ? \"50px\" : \"30px\"}}\n            />\n\n            <img \n                className=\"shirt-select\"\n                alt=\"football jersey icon\"\n                onClick={() => handlePatternChoice(teamNo, 4)}\n                src=\"./jerseys/pattern4.svg\"\n                style={{ backgroundColor: chosenShirt.pattern === 4 ? chosenShirt.colour : null, width: chosenShirt.pattern === 4 ? \"50px\" : \"30px\"}}\n            />\n\n            <img \n                className=\"shirt-select\"\n                alt=\"football jersey icon\"\n                onClick={() => handlePatternChoice(teamNo, 5)}\n                src=\"./jerseys/pattern5.svg\"\n                style={{ backgroundColor: chosenShirt.pattern === 5 ? chosenShirt.colour : null, width: chosenShirt.pattern === 5 ? \"50px\" : \"30px\"}}\n            />\n\n            <img \n                className=\"shirt-select\"\n                alt=\"football jersey icon\"\n                onClick={() => handlePatternChoice(teamNo, 6)}\n                src=\"./jerseys/pattern6.svg\"\n                style={{ backgroundColor: chosenShirt.pattern === 6 ? chosenShirt.colour : null, width: chosenShirt.pattern === 6 ? \"50px\" : \"30px\"}}\n            />\n    </div>\n\n        <h3>Choose { teamName }'s colour: </h3>\n        <CirclePicker \n            style={{ display: \"block\"}}\n            onChangeComplete={ (colour, event) => handleColourChoice(colour, event, teamNo)}\n        />  \n    </>\n)\nexport default ShirtPicker;","import React, { Component } from \"react\";\nimport { FormControl, InputGroup, Form } from \"react-bootstrap\";\nimport { fairSort } from \"../../functions/fairSort\";\nimport { randomSort } from \"../../functions/randomSort\";\nimport ShirtPicker from \"../ShirtPicker\";\n\nclass StartForm extends Component {\n  constructor(props) {\n    super(props);\n    let perTeam = 5;\n\n    this.state = {\n      perTeam: perTeam,\n      // this function will create 10 empty player objects\n      players: this.generateEmptyPlayers(perTeam * 2),\n      previousTeams: [],\n      team1: [],\n      team2: [],\n      submitted: false,\n      randomSort: true,\n      teamNames: [\"Team 1\", \"Team 2\"],\n      shirtChoice: [\n        { colour: \"red\", pattern: 1 },\n        { colour: \"blue\", pattern: 2 }\n      ]\n    };\n\n    this.handleAddField = this.handleAddField.bind(this);\n    this.handleRemoveField = this.handleRemoveField.bind(this);\n\n    this.handleAddTeamName = this.handleAddTeamName.bind(this);\n    this.handleAddPlayer = this.handleAddPlayer.bind(this);\n    this.handleAddSkill = this.handleAddSkill.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  //function to generate a number of empty player objects with properties: default is 10\n  generateEmptyPlayers(number) {\n    let players = [];\n\n    for (let i = 0; i < number; i += 1) {\n      players.push({ name: \"\", skill: 5 });\n    }\n    return players;\n  }\n\n  // function to add 2 extra empty player fields (if current players < 40) by adding 2 empty player objects in local state.\n  handleAddField(e) {\n    e.preventDefault();\n    let { players } = this.state;\n    this.setState({\n      players:\n        players.length < 40\n          ? [...players, { name: \"\", skill: 5 }, { name: \"\", skill: 5 }]\n          : [...players],\n      perTeam: this.state.perTeam + 1\n    });\n  }\n\n// function to remove 2 empty player fields by remove 2 player objects (if current players > 2) in local state.\n  handleRemoveField(e) {\n    e.preventDefault();\n    let { players } = this.state;\n    this.setState({\n      //remove two (one per team) final empty player objects from array\n      players:\n        players.length > 2\n            ? players.filter((_, index) => {\n                return index < players.length - 2;\n                })\n            : [...players],\n      perTeam: this.state.perTeam - 1\n    });\n  }\n\n  // for user inputting team name\n  handleAddTeamName(e, teamNo) {\n    // copy the current players array\n    let newTeamNames = [...this.state.teamNames];\n\n    newTeamNames[teamNo - 1] = e.currentTarget.value;\n\n    //re-setting the state with a new version of this array\n    this.setState({ teamNames: newTeamNames });\n  }\n\n// for user inputting player name\n  handleAddPlayer(e, index) {\n    // copy the current players array\n    let newPlayers = [...this.state.players];\n\n    //modifying only the name property of the player with this specific index in the players array\n    newPlayers[index].name = e.currentTarget.value;\n\n    //re-setting the state with a new version of this array\n    this.setState({ players: newPlayers });\n  }\n\n  // user inputting skill\n  handleAddSkill(e, index) {\n    // copy the current players array\n    let newPlayers = [...this.state.players];\n\n    //modifying only the skill property as a number of the player with this specific index in the players array\n    newPlayers[index].skill = +e.currentTarget.value;\n\n    //re-setting the state with a new version of this array\n    this.setState({ players: newPlayers });\n  }\n\n  // will reset current form to default settings\n  handleReset() {\n    this.setState({\n      perTeam: 5,\n      players: this.generateEmptyPlayers(this.state.perTeam * 2),\n      teamNames: [\"Team 1\", \"Team 2\"]\n    });\n  }\n\n  validate(players) {\n    // this functions takes all players and tests 1. whether there is at least two, whether\n    let message = \"\";\n    let warning = false;\n\n    if (players.length < 2) {\n        message = \"Please add at least 2 players and try again\";\n        warning = true;\n    } else if (players.length % 2 === 1) {\n        message =\n            \"You have entered an odd number of players. One team will have one extra player. This will result in an unbalanced team. Is this ok?\";\n        warning = true;\n    } else {\n        warning = false;\n    }\n\n    return { warning, message };\n  }\n\n  // two functions used in the 'shirt picker' component\n  handlePatternChoice(teamNo, number) {\n    // copy current shirt choices from state, update the pattern number of the specific one for the given team and re-set the object to state\n    let newShirtChoices = [...this.state.shirtChoice];\n    newShirtChoices[teamNo - 1].pattern = number;\n\n    this.setState({ shirtChoice: newShirtChoices });\n  }\n\n  handleColourChoice(colour, _, teamNo) {\n    // copy current shirt choices from state, update the colour choice of the specific one for the given team and re-set the object to state\n    let newShirtChoices = [...this.state.shirtChoice];\n    newShirtChoices[teamNo - 1].colour = colour.hex;\n\n    this.setState({ shirtChoice: newShirtChoices });\n  }\n\n  // putting user input into titlecase for consistency\n  titleCase(string) {\n    let lowerCase =  string.toLowerCase();\n    let upperFirstChar = lowerCase.charAt(0).toUpperCase();\n    let titleCase = lowerCase.replace(lowerCase.charAt(0), upperFirstChar);\n    return titleCase;\n  }\n\n  //this function will validate user submitted information in state and pass it to the reducer\n  handleSubmit(type, e) {\n    e.preventDefault();\n    let { players } = this.state;\n\n    // filters all players have been assigned names? this is so that any blank fields submitted by the user aren't put into global state. Then input is put into title case for the global state.\n    let truePlayers = players\n      .filter(current => {\n        return current.name !== \"\";\n      })\n      .map(current => {\n        return { ...current, name: this.titleCase(current.name) };\n      });\n\n    let splitTeams = {};\n\n    if (type === \"random\") {\n      // function will sort the players into 2 random teams and return an object with properties team1 and team2\n      splitTeams = randomSort(truePlayers);\n    } else {\n      // function will sort the players into 2 teams based on skill level and return an object with properties team1 and team2\n      splitTeams = fairSort(truePlayers);\n    }\n\n    // store the team names in title case in state\n    let tidyTeamNames = this.state.teamNames.map(current =>\n      this.titleCase(current)\n    );\n\n    let formResults = {\n        teamNames: tidyTeamNames,\n        players: truePlayers,\n        perTeam: Math.round(truePlayers.length / 2),\n        //if no players have been added or an odd number of players has been added, user needs to accept a warning before form will be submitted\n        submitted: !this.validate(truePlayers).warning,\n        team1: splitTeams.team1,\n        team2: splitTeams.team2,\n        previousTeams: {\n            team1Name: tidyTeamNames[0],\n            team2Name: tidyTeamNames[1],\n            team1: splitTeams.team1,\n            team2: splitTeams.team2,\n            shirtChoice: this.state.shirtChoice\n        },\n        randomSort: type === \"random\" ? true : false,\n        message: this.validate(truePlayers).message,\n        warning: this.validate(truePlayers).warning,\n        shirtChoice: this.state.shirtChoice\n    };\n\n    // still set local state here so that we can revert to the form as it is when we go back to edit players screen\n    this.setState({ ...this.state, formResults });\n\n    // actions/reducer function to save global state\n    this.props.handleSave(formResults);\n  }\n\n  render() {\n    let { players, teamNames } = this.state;\n    let { showAbout, showPrevious, submitted } = this.props;\n\n    return submitted || showPrevious || showAbout ? null : (\n      <div className=\"container\">\n        <Form className=\"card\">\n          <h2>Team Details</h2>\n\n          <div className=\"team-choices team-choices-1\">\n            <h3>\n              <label>Choose Team 1's Name</label>\n            </h3>\n            <FormControl\n              onChange={e => this.handleAddTeamName(e, 1)}\n              value={teamNames[0]}\n              type=\"text\"\n              placeholder=\"Team 1\"\n            />\n            <ShirtPicker\n              teamName={teamNames[0]}\n              handlePatternChoice={(teamNo, number) =>\n                this.handlePatternChoice(teamNo, number)\n              }\n              handleColourChoice={(colour, event) =>\n                this.handleColourChoice(colour, event, 1)\n              }\n              teamNo={1}\n              chosenShirt={this.state.shirtChoice[0]}\n            />\n          </div>\n\n          <div className=\"team-choices team-choices-2\">\n            <h3>\n              <label>Choose Team 2's Name</label>\n            </h3>\n            <FormControl\n              onChange={e => this.handleAddTeamName(e, 2)}\n              value={teamNames[1]}\n              type=\"text\"\n              placeholder=\"Team 2\"\n            />\n            <ShirtPicker\n              teamName={teamNames[1]}\n              handlePatternChoice={(teamNo, number) =>\n                this.handlePatternChoice(teamNo, number)\n              }\n              handleColourChoice={(colour, event) =>\n                this.handleColourChoice(colour, event, 2)\n              }\n              teamNo={2}\n              chosenShirt={this.state.shirtChoice[1]}\n            />\n          </div>\n\n        {/* 2 buttons, adding more players will add 2 extra input fields, removing will take 2 away. */}\n          <div className=\"container player-details\">\n            <h2>Player Details</h2>\n            <div className=\"button-panel\">\n              <button\n                onClick={e => this.handleAddField(e)}\n                className=\"add-player-button\"\n              >\n                <h1>+</h1>\n                Add more Players\n              </button>\n\n              <button\n                onClick={e => this.handleRemoveField(e)}\n                className=\"remove-player-button\"\n              >\n                  <h1>-</h1>\n                Use fewer Players\n              </button>\n            </div>\n\n            {/* create player inputs for each empty object in the players array currently (default is 10 but user can add/remove)  */}\n            {submitted\n              ? null\n              : players.map((_, index) => (\n                  <>\n                    <InputGroup key={index}>\n                      <h5> Player {index + 1} </h5>\n                      <label>Name</label>\n                      <FormControl\n                        onChange={e => this.handleAddPlayer(e, index)}\n                        value={players[index].name}\n                        key={index}\n                        type=\"text\"\n                      />\n\n                      <label>Skill</label>\n                      <FormControl\n                        onChange={e => this.handleAddSkill(e, index)}\n                        value={players[index].skill}\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"10\"\n                      />\n                    </InputGroup>\n                    <hr />\n                  </>\n                ))}\n            <div className=\"button-panel\">\n              <button\n                className=\"button no-border\"\n                // submits form with random type - type is used in splitting function to determine how to split teams\n                onClick={e => this.handleSubmit(\"random\", e)}\n              >\n                Sort players Randomly\n              </button>\n              <button\n                className=\"button no-border\"\n                //submits form with fair type - type is used in splitting function to determine how to split teams\n                onClick={e => this.handleSubmit(\"fair\", e)}\n              >\n                Sort into 2 fair teams\n              </button>\n              <button\n                className=\"button no-border\"\n                variant=\"danger\"\n                onClick={() => this.handleReset()}\n              >\n                Reset form\n              </button>\n            </div>\n          </div>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default StartForm;\n","export const randomSort = (players) => {\n    // function to shuffle an array randomly - fischer-yates\n    let shuffle = (players) => {\n        for(let i = players.length - 1; i > 0; i--){\n            const j = Math.floor(Math.random() * i)\n            const temp = players[i]\n            players[i] = players[j]\n            players[j] = temp\n        }\n        return players;\n    }\n\n    let shuffled = shuffle(players);\n\n    //split the shuffled array into 2 halves\n    let team1 = (shuffled) => shuffled.filter((_, index) => {\n        return index < shuffled.length / 2 ;\n    }) \n\n    let team2 = (shuffled) => shuffled.filter((_, index) => {\n        return index >= shuffled.length / 2;\n    }) \n\n    console.log(\"split randomly!!\");\n    return { team1: team1(shuffled), team2: team2(shuffled)};\n}","export const fairSort = (players) => {\n\n// this function will then return an array of player objects sorted by skill level\n    \nlet sortBySkill = (players) => {\n        return players.sort((a, b) => {\n            if ( a.skill < b.skill ){\n                return 1;\n            }\n            if ( a.skill > b.skill ){\n                return -1;\n            }\n        return 0;\n        })\n    }\n\n    let sortedPlayers = sortBySkill(players);\n\n    // best players made from the first half of the ordered 'players' array\n    let bestPlayers = sortedPlayers.filter((_, index) => {\n        return index < sortedPlayers.length / 2;\n    })\n\n    // worst players made from the second half of the ordered 'players' array. \n    let worstPlayers = sortedPlayers.filter((_, index) => {\n        return index >= sortedPlayers.length / 2;\n    });\n\n    let team1 = [];\n    let team2 = [];\n\n    //splitting array of all players into 2 teams based on their index\n    let splitPlayers = (above, below) => {\n\n        // this rearranges the lower-skilled players, puts the best of the low skilled to the end of the low skilled players array so that sorting becomes fairer when number of players per team is odd\n        if (below.length % 2 === 1){\n            below.push(below.shift())\n        }\n        \n        // take the odd-indexed players from the best players\n        let team1Above = above.filter((_, index) => {\n            return index % 2 === 1;\n        });\n        // take the even-indexed players from the worst (to ensure teams are balanced in size)\n        team1 = team1Above.concat(below.filter((_, index) => {\n            return index % 2 === 0;\n        }));\n\n        // take even-indexed players from best players\n       let team2Above = above.filter((_, index) => {\n            return index % 2 === 0;\n        });\n\n        // take the odd-indexed players from the worst players\n        team2 = team2Above.concat(below.filter((_, index) => {\n            return index % 2 === 1;\n        }));\n    }\n\n    splitPlayers(bestPlayers, worstPlayers);\n\n    console.log(\"split fairly!\");\n    return { team1: team1, team2: team2 }\n}","import { connect } from 'react-redux'\nimport StartForm from './StartForm'\nimport { submitPlayers } from '../../data/actions'\n\nconst mapStateToProps = ({\n  players,\n  teamNames,\n  submitted,\n  randomSort,\n  showPrevious,\n  showAbout,\n  team1,\n  team2,\n  previousTeams,\n}) => {\n  return {\n    players,\n    teamNames,\n    submitted,\n    randomSort,\n    showPrevious,\n    showAbout,\n    team1,\n    team2,\n    previousTeams,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleAddField: () => dispatch({ type: 'addFields' }),\n    handleRemoveField: () => dispatch({ type: 'removeFields' }),\n    handleSave: formResults => dispatch(submitPlayers(formResults)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StartForm)\n","export const editPlayers = () => ({\n    type: \"editPlayers\",\n    submitted: false,\n})\n\nexport const acceptWarning = ({ players, submitted }) => ({\n    type: \"acceptWarning\",\n    warning: false,\n    message: \"\",\n    submitted: players.length > 1 ? true : false,\n})\n\nexport const showPrevious = ({ showPrevious }) => ({\n    type: \"showPrevious\",\n    showPrevious: !showPrevious,\n})\n\nexport const showAbout = ({ showAbout }) => ({\n    type: \"showAbout\",\n    showAbout: !showAbout,\n})\n\nexport const submitPlayers = ({  \n    team1, \n    team2, \n    players, \n    perTeam, \n    teamNames, \n    previousTeams, \n    randomSort, \n    submitted, \n    warning, \n    message,\n    shirtChoice\n}) => ({\n    type: \"submitPlayers\", \n    team1, \n    team2, \n    players, \n    perTeam, \n    teamNames, \n    previousTeams,\n    randomSort, \n    submitted,\n    warning,\n    message,\n    shirtChoice\n})\n\n    // handleAddTeamName(e, teamNo){\n    //     // copy the current players array\n    //     let newTeamNames = [...this.state.teamNames];\n\n    //     newTeamNames[teamNo - 1] = e.currentTarget.value;\n\n    //     //re-setting the state with a new version of this array\n    //     this.setState({ teamNames: newTeamNames });\n    // }\n\n    // handleAddPlayer(e, index){\n    //     // copy the current players array\n    //     let newPlayers = [...this.state.players];\n\n    //     //modifying only the name property of the player with this specific index in the players array\n    //     newPlayers[index].name = e.currentTarget.value;\n\n    //     //re-setting the state with a new version of this array\n    //     this.setState({ players: newPlayers });\n    // }\n\n    // handleAddSkill(e, index){\n    //     // copy the current players array\n    //     let newPlayers = [...this.state.players];\n\n    //     //modifying only the skill property as a number of the player with this specific index in the players array\n    //     newPlayers[index].skill = +e.currentTarget.value;\n\n    //     //re-setting the state with a new version of this array\n    //     this.setState({ players: newPlayers });\n    // }\n\n    // handleSubmit(type){\n    //     let { players, previousTeams } = this.state;\n    \n    //     // filters all players have been assigned names? this is so that any blank fields submitted by the user aren't taken into account\n    //     let truePlayers = players.filter(current => {\n    //         return current.name !== \"\";\n    //     });\n\n    //     let splitTeams = {};\n\n    //     if (type === \"random\") {\n    //         // function will sort the players into 2 random teams and return an object with properties team1 and team2\n    //         splitTeams = randomSort(truePlayers);\n    //     } else {\n    //         // function will sort the players into 2 teams based on skill level and return an object with properties team1 and team2\n    //         splitTeams = fairSort(truePlayers);\n    //     }\n\n    //     // validation function - to give specific message if there is a problem\n    //     let validate = () => {\n    //         if ( truePlayers.length < 1 ){\n    //             return \"You haven't yet added any players: please add some players and try again\" \n    //         } else if( truePlayers.length % 2 === 1 ){\n    //             return \"You have entered an odd number of players. One team will have one extra player. Is this ok?\"\n    //         } else {\n    //             return \"\"\n    //         }\n    //     }\n\n    //     // will return true or false for validation\n    //     let numCheck = () => {\n    //         return truePlayers.length < 1 || truePlayers.length % 2 === 1;\n    //     }\n\n    //     this.setState({ \n    //         players: truePlayers,\n    //         perTeam: Math.round(truePlayers.length / 2),\n    //         //if no players have been added or an odd number of players has been added, user needs to accept a warning before form will be submitted\n    //         submitted: validate() === \"\" ? true : false,\n    //         team1: splitTeams.team1,\n    //         team2: splitTeams.team2,\n    //         previousTeams: [{\n    //             team1Name: this.state.teamNames[0], \n    //             team2Name: this.state.teamNames[1],\n    //             team1: splitTeams.team1, \n    //             team2: splitTeams.team2\n    //         }, ...previousTeams],\n    //         randomSort: type === \"random\" ? true : false,\n    //         message: validate(),\n    //         warning: numCheck(),\n    //     });\n\n    // }\n\n    // handleReset() {\n    //     this.setState({\n    //         players: this.generateEmptyPlayers(10),\n    //         submitted: false,\n    //     })\n    // }\n\n    // handleEditPlayers() {\n    //     this.setState({\n    //         submitted: false,\n    //     })\n    // }\n\n    // handleShowPrevious() {\n    //     this.setState({\n    //         showPrevious: !this.state.showPrevious,\n    //     })\n    // }\n\n    // handleShowAbout() {\n    //     this.setState({\n    //         showAbout: !this.state.showAbout,\n    //     })\n    // }\n\n \n\n    // titleCase(string) {\n    //     return string.toLowerCase().replace(string.charAt(0), string.charAt(0).toUpperCase());\n    // } ","import React from 'react';\n\nconst Teams = ({ team, teamNumber, teamName, shirtChoice }) => (   \n        <div className={ \"pitch-side pitch-side-\" + teamNumber}>\n            <h2>{ teamName } </h2>\n            {/* Images are pulled in using the pattern number attached to the shirtChoice object. Images in the public folder are saved with the same pattern numbers.  */}\n            <img \n                className=\"team-shirt\" \n                alt=\"football jersey icon\" \n                style={{ backgroundColor: shirtChoice.colour}} \n                src={ \"./jerseys/pattern\" + shirtChoice.pattern + \".svg\"} />\n            {\n                team.map((current, index) => \n                <>\n                    <span className=\"player-individual\">\n                        <span className=\"player-name\" \n                        key={ index }\n                    > { current.name } </span>\n                        <span className=\"skill-label\">Skill level: { current.skill } \n                        </span>\n                    </span>\n                </>\n                )\n            }\n            <p className=\"total-skill\">Total skill level for team: {team.reduce((acc, current)=> ( acc + current.skill ), 0) } </p>\n        </div>\n    )\n\nexport default Teams;","import React from 'react';\nimport Teams from \"../Teams\";\n\nconst Pitch = ({ \n    team1, \n    team2, \n    allPlayers, \n    randomSort, \n    handleEditPlayers, \n    teamNames, \n    submitted, \n    showPrevious, \n    showAbout, \n    handleReset,\n    shirtChoice\n}) => ( \n    !submitted || showPrevious || showAbout ? null : (\n    <div className=\"container\">\n        <h3>Players on pitch:</h3>\n        <ul className=\"all-player-list\">\n            { allPlayers.map((current, index) => (\n                <li className=\"all-player-list-item\" key={ index }>\n                    { current.name }\n                </li>\n            ))}\n        </ul>\n\n        <h3>Sorted: { randomSort === true ? \"Randomly\" : \"Based on skill level\"}</h3>\n        <section className=\"full-pitch\"> \n            <Teams\n                teamNumber={ 1 }\n                team={ team1 }\n                teamName={ teamNames[0] }\n                shirtChoice={ shirtChoice[0]}\n            /> \n        \n            <Teams\n                teamNumber={ 2 }\n                team={ team2 }\n                teamName={ teamNames[1] }\n                shirtChoice={ shirtChoice[1]}\n            />\n\n        </section>\n        <div className=\"button-panel\">\n            <button\n                className=\"pitch button\"\n                onClick={ handleEditPlayers }> Edit Players\n            </button>\n            <button\n                className=\"pitch button\"\n                onClick={ handleReset }> Reset Teams\n            </button>\n        </div>\n        \n    </div>\n    )\n)\n\nexport default Pitch;","import { connect } from \"react-redux\";\nimport Pitch from \"./Pitch\";\n\nconst mapStateToProps = ({ \n    team1, \n    team2, \n    players, \n    randomSort, \n    teamNames,\n    submitted,\n    showPrevious,\n    showAbout,\n    shirtChoice\n}) => {\n    return {\n        team1, \n        team2, \n        allPlayers: players,\n        randomSort, \n        teamNames,\n        submitted,\n        showPrevious,\n        showAbout,\n        shirtChoice\n    };\n  };\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleEditPlayers: () => dispatch({ type: \"editPlayers\" }),\n        handleReset: () => dispatch({ type: \"reset\" }),\n    }; \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pitch);","import React from 'react';\nimport { Button, Alert } from \"react-bootstrap\";\n\nconst Warning = ({ message, warning, handleAcceptWarning }) => (  \n   !warning ? null : (\n    <div className=\"alert-contain\">\n    <Alert variant=\"danger\" className=\"form-submit-alert\">\n      <Alert.Heading>Please check your players</Alert.Heading>\n      <p>\n        { message }\n      </p>\n      <hr />\n      <div className=\"d-flex justify-content-end\">\n        <Button onClick={ handleAcceptWarning } variant=\"outline-success\">\n          Ok\n        </Button>\n      </div>\n    </Alert>\n\n  </div>\n   )\n)\n\n\nexport default Warning;","import { connect } from \"react-redux\";\nimport Warning from \"./Warning\";\n\nconst mapStateToProps = ({ warning, message }) => {\n    return { warning, message };\n  };\n\nconst mapDispatchToProps = dispatch => {\n    return {\n      handleAcceptWarning: () => dispatch({ type: \"acceptWarning\" }),\n  }; \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Warning);","import React from 'react';\nimport { Table } from \"react-bootstrap\";\n\nconst Previous = ({ previousTeams, showPrevious }) => (  \n    !showPrevious ? null : \n    <div className=\"container\"> \n        { !previousTeams[0] ? \"You haven't built any teams this session: please add some players and try again\" : (\n        <>\n        <h2>Previous team splits</h2>\n        <Table striped>\n        <tbody>\n            <tr>\n                <th>Teams:</th>\n                <th>Team 1</th>\n                <th>Team 2</th>\n            </tr>\n        \n        {/* creates 2x table rows for each previous team */}\n        { previousTeams.map((current, index) => (\n            <>\n            <tr key={ (index+1) * 500 }>\n                <td rowSpan=\"2\">\n                    {/* creates team shirt icon for each team if there is shirtChoice data for display on the table */}\n                    {/* team 1's shirt choice */}\n                    { current.shirtChoice ? \n                        <img \n                            className=\"team-shirt-table\"\n                            alt=\"football jersey icon\" style={{ backgroundColor: current.shirtChoice[0].colour, }} \n                            src={ \"./jerseys/pattern\" + current.shirtChoice[0].pattern + \".svg\"} /> \n                    : null } \n                    vs. \n                    {/* team 2's shirt choice */}\n                    { current.shirtChoice ? \n                        <img \n                            alt=\"football jersey icon\" \n                            className=\"team-shirt-table\"\n                            style={{ \n                                backgroundColor: current.shirtChoice[1].colour, }} \n                            src={ \"./jerseys/pattern\" + current.shirtChoice[1].pattern + \".svg\"} \n                        /> \n                    : null } \n                </td>\n\n                {/* table cells with a background colour the same as their team colour. Team 1 and team 2 */}\n                <td style={{ backgroundColor: current.shirtChoice[0].colour }}>\n                    { current.team1Name } \n                </td>\n                <td style={{ backgroundColor: current.shirtChoice[1].colour }}>\n                    { current.team2Name } \n                </td>\n            </tr>\n\n            {/* Finally, table cells that lists each player within each team.  */}\n            <tr key={ (index+1) * 600 }>\n                <td> { current.team1.map((current, index) => (\n                        <span key={ (index+1) * 300}> { current.name + \" \" }</span>\n                    ))}\n                </td>\n                <td> { current.team2.map((current, index) => (\n                        <span key={ (index+1) * 400 } >{ current.name + \" \"}</span>\n                    )) }\n                </td>\n            </tr>\n            </>\n        ))}\n        </tbody>\n        </Table>\n        </> )}\n    </div>\n    )\n\nexport default Previous;","import { connect } from \"react-redux\";\nimport Previous from \"./Previous\";\n\nconst mapStateToProps = ({ previousTeams, showPrevious }) => {\n    return {\n        previousTeams,\n        showPrevious\n    };\n  };\n\nexport default connect(mapStateToProps)(Previous);","import React from 'react';\n\nconst About = ({ showAbout }) => (  \n    !showAbout ? null : (\n    <div class=\"container about\"> \n        <h2>Welcome to the 5-a-side team building app! </h2>\n        <p>This is an app built for amateur football groups, schools and those whole play team sports in general.</p>\n        <p>This app works by taking all the names of people who will be playing the game (you can submit between 2 and 40 players - you're not limited to just 10!) as well as their skill level (changing this is not compulsory! if you know everyone's skill level it can help to balance the teams fairly). You have the choice of sorting the players randomly or sorting them based on their skill level.</p>\n        <p>On choosing your sort option, you'll be taken to a new page with two lists of players in their new teams. It couldn't be much simpler!</p>\n        <p>I've added a couple of extra features to this app as well - When submitting your team names, you can add any team names and come colours and styles for a team kit (a bit of fun if you'd like to get creative). If you look to the top-right corner you will see a 'previous teams' button. Here you can open a tidy table which displays your previous team splits (this could be handy if you're sorting a lot of players into multiple games all at once).</p>\n        <p>I've also added some alerts to make sure that you can only build teams if you've entered at least two players, and to let you know that if you enter an odd number of players then one of your teams will have 1 extra person. Sometimes it helps to be warned!</p>\n        <p>Feel free to have a bit of a click around and see how many teams you can build!</p>\n        <p>This app was built by Ellie as part of the DevelopMe_ Coding Fellowship September-December 2019.</p>\n        <p>Many thanks: Icons made by <a href=\"https://www.flaticon.com/authors/smashicons\" title=\"Smashicons\">Smashicons</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></p>\n    </div>\n    )\n)\n\nexport default About;","import { connect } from \"react-redux\";\nimport About from \"./About\";\n\nconst mapStateToProps = ({ showAbout }) => {\n    return {\n      showAbout,\n    };\n};\n\nexport default connect(mapStateToProps)(About);","import React from 'react';\nimport Header from \"./Header\";\nimport StartForm from \"./StartForm\";\nimport Pitch from \"./Pitch\";\nimport Warning from \"./Warning\";\nimport Previous from \"./Previous\";\nimport About from \"./About\";\n\nconst App = () => (\n    <>\n        <Header/>\n        <Previous/>\n        <About/>\n        <Warning /> \n        <StartForm />\n        <Pitch /> \n    </>\n);\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import './style.css';\nimport store from  \"./data/store\";\nimport { Provider } from \"react-redux\";\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst render = () => {\n    ReactDOM.render(\n        <Provider store={ store }>\n            <App />,\n         </Provider>,\n        document.getElementById(\"root\")\n    );\n}\n\nstore.subscribe(render);\n\nrender();\n\n// store.dispatch({ type: \"addFields\" });\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}